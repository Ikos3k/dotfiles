#!/bin/bash

check-disk-busy() {
    echo "Checking if $MOUNT_POINT is busy..."
    lsof +f -- "$MOUNT_POINT" > /tmp/disk_busy_check.log
    if [ -s /tmp/disk_busy_check.log ]; then
        echo "The following processes are using $MOUNT_POINT:"
        cat /tmp/disk_busy_check.log
        read -p "Do you want to force unmount the device? [y/N]: " FORCE_UNMOUNT
        case "$FORCE_UNMOUNT" in
            [yY][eE][sS]|[yY])
                sudo umount -l "$MOUNT_POINT"
                if [ $? -eq 0 ]; then
                    echo "$MOUNT_POINT forcefully unmounted successfully."
                else
                    echo "Failed to forcefully unmount $MOUNT_POINT."
                    exit 1
                fi
                ;;
            *)
                echo "Unmount canceled. Resolve the busy processes and try again."
                exit 1
                ;;
        esac
    else
        echo "$MOUNT_POINT is not busy. Proceeding to unmount."
    fi
    rm -f /tmp/disk_busy_check.log
}

eject-device() {
    DEVICE=$1
    read -p "Do you want to eject $DEVICE? [y/N]: " CONFIRM_EJECT
    case "$CONFIRM_EJECT" in
        [yY][eE][sS]|[yY])
            sync
            echo "Ejecting $DEVICE..."
            sudo eject "$DEVICE"
            if [ $? -eq 0 ]; then
                echo "Device $DEVICE ejected successfully."
            else
                echo "Failed to eject $DEVICE."
            fi
            ;;
        *)
            echo "Skipped ejecting $DEVICE."
            ;;
    esac
}

power-off-device() {
    DEVICE=$1
    eject-device "$DEVICE"
    sync
    read -p "Do you want to power off the device $DEVICE? [y/N]: " CONFIRM
    case "$CONFIRM" in
        [yY][eE][sS]|[yY])
            echo "Powering off $DEVICE..."
            sudo udisksctl power-off -b "$DEVICE"
            if [ $? -eq 0 ]; then
                echo "Device $DEVICE powered off successfully."
            else
                echo "Failed to power off $DEVICE."
            fi
            ;;
        *)
            echo "Skipped powering off the device."
            ;;
    esac
}

if [ $# -lt 1 ]; then
    echo "Usage: unmount_device <partition> [mount_point]"
    echo "ex: $ unmount_device /dev/sdX1 /mnt/mydrive"
    exit 1
fi

PARTITION=$1
MOUNT_POINT=$2

if [ ! -e "$PARTITION" ]; then
    echo "Partition $PARTITION does not exist."
    exit 1
fi

if [ -z "$MOUNT_POINT" ]; then
    MOUNT_POINT=$(findmnt -n -o TARGET "$PARTITION")
    if [ -z "$MOUNT_POINT" ]; then
        echo "Could not find a mount point for device $PARTITION."
        DEVICE="/dev/$(lsblk -no PKNAME "$PARTITION")"
        if [ -z "$DEVICE" ]; then
            echo "Could not determine the device for $PARTITION."
            exit 1
        fi
        echo "Device detected: $DEVICE"
        power-off-device "$DEVICE"
        exit 0
    fi
    echo "Detected mount point for $PARTITION: $MOUNT_POINT"
fi

if ! mountpoint -q "$MOUNT_POINT"; then
    echo "$MOUNT_POINT is not a valid mount point or does not exist."
    exit 1
fi

DEVICE="/dev/$(lsblk -no PKNAME "$PARTITION")"
if [ -z "$DEVICE" ]; then
    echo "Could not determine the device for $PARTITION."
    exit 1
fi
echo "Device detected: $DEVICE"

if ! grep -q "$PARTITION" /proc/mounts; then
    echo "Partition $PARTITION is not mounted."
    power-off-device "$DEVICE"
    exit 0
fi

if [ -n "$MOUNT_POINT" ] && ! mountpoint -q "$MOUNT_POINT"; then
    echo "$MOUNT_POINT is not a valid mount point or does not exist."
    exit 1
fi

sync
check-disk-busy
if sudo umount "$MOUNT_POINT"; then
    echo "Unmounted $MOUNT_POINT successfully."
    power-off-device "$DEVICE"
else
    echo "Failed to unmount $MOUNT_POINT."
    exit 1
fi
